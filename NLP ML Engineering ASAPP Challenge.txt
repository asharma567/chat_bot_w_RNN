Hey Jane -- 

I've walked through both take-homes. They seem fun, interesting, and challenging! I'd certainly like to proceed through the process but would you prefer that I speak to your Lead NLP engineer first or after I submit the take-home. 

I've still have to carve out time for it and of course, I'll try and complete it in as short amount of time as possible.

Let me know what you think.

Best,
- Ajay

=====

* Look up some of the technology google's using for inbox
* Look up google brain AI
* ask vikas about other chatbot stuff
* think about how to couch my NLP work
* remember to caveat the unit testing portion
* what are the data engineering implications: are you considering using apache storm



ASAPP NLP / ML Engineering Challenge
====================================

Welcome to your challenge project!

For this challenge, we ask that you implement a solution and write up answers to the follow-up questions at home in your own time. Please send us your code and results within a week. If you need more time, let us know. We estimate that the challenge should take somewhere between 5 and 10 hours depending on your experience and speed.


Motivation
----------


ASAPP builds state of the art Natural Language Processing and Machine Learning tools that empower human customer service representatives to become 10X more efficient than they are today. A key ingredient is our auto-suggestion server, which significantly speeds up the customer service representatives' responses.

I've included a .gif which demonstrates an early version of our auto-suggestion server - it should give you a good idea of what I'm talking about.

Your challenge is to design and implement a similar NLP/ML-based auto-suggestion server using the sample chat histories in sample_conversations.json, and then prepare to talk through how you might improve on your results, as well as what the challenges would be around scaling it up to a corpus of a billion conversations.

If we mutually agree to proceed then your work will form the basis for continued discussions and interviews.


Recommendations
---------------

- Use the programming languages and tools that you're most familiar with.
- Use open source libraries instead of reinventing the wheel. (For example, we use Theano, Pandas, NLTK, Megam, Torch, CherryPy, Werkzeug etc...)
- Time permitting, add tests to ensure the correctness of your code.
- Have fun! If you don't think this project sounds like fun, then working at ASAPP may not be your cup of tea :)


Goals
-----

1: Offline data processing

    · Write a function that reads the sample_conversations.json file, processes the data, and creates whatever data models you need to generate realtime auto-suggestions.
    · It's fine if this function takes a very long time to run. However, a week is probably a bit too long :)
    · Extra credit: Make the processed data model serializable, so that it can be saved to disk once it's been constructed

2: Realtime autosuggest

    · Write a function that uses the data model from step 1 and takes a text input prefix and generates sentence completions. Here are some examples of what it could look like:
    
        generate_suggestions('how ca') -> ['How can I help you today?']
        generate_suggestions('what is y') -> ['What is your account number?', 'What is your address?', 'What is your order number?']
        generate_suggestions('when w' -> ['When was the last time', 'When was the last time you changed your password?', 'When was the last time you rebooted your router?'])
    
    · This function should be *fast*! It would be called on every keystroke, so thousands of times per second per server.
    · The input of the function should be a partial message input, and the output should be a small list of suggestions. Imagine using the product in the .gif yourself, and try to generate outputs that you believe would be genuinely useful for a customer service representative.

3: Autosuggest server

    · Wrap the realtime autosuggest engine in an HTTP server, and return suggestions as JSON, e.g
    
        # curl http://localhost:13000/autosuggest?q=When+did
        {"Suggestions": ["When did the", "When did the problem begin", "When did the problem"]}


Follow-up questions
-------------------

Please take the time to write answers to these questions along with your solution. Think through them as thoroughly as you can. Our goal will be to get a sense of how comprehensively you understand and think about the type of problems we face.

It's fine if you don't have concrete answers to all of them. We would still want to hear your thought process. Sometimes asking the right questions is even more important than finding the answer.

- How would you evaluate your autosuggest server? If you made another version, how would you compare the two to decide which is better?

- One way to improve the autosuggest server is to give topic-specific suggestions. How would you design an auto-categorization server? It should take a list of messages and return a TopicId. (Assume that every conversation in the training set has a TopicId).

- How would you evaluate if your auto-categorization server is good?

- Processing hundreds of millions of conversations for your autosuggest and auto-categorize models could take a very long time. How could you distribute the processing across multiple machines?
