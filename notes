- could we done this with a similarity matrix or some other hashing technique
- understand how the algorithm works, see if it fits into ES algo
- just have it read in through the same spell_checked_input.txt
- refactor the code, oop style, better variable naming

=========================
generate_suggestions('how ca') -> ['How can I help you today?']

generate_suggestions('what is y') -> ['What is your account number?', 'What is your address?', 'What is your order number?']

generate_suggestions('when w' -> ['When was the last time', 'When was the last time you changed your password?', 'When was the last time you rebooted your router?'])

Retrieval-based models (easier) use a repository of predefined responses and some kind of heuristic to pick an appropriate response based on the input and context. The heuristic could be as simple as a rule-based expression match, or as complex as an ensemble of Machine Learning classifiers. These systems donâ€™t generate any new text, they just pick a response from a fixed set.

closed domain (easier)


- Use open source libraries instead of reinventing the wheel. (For example, we use Theano, Pandas, NLTK, Megam, Torch, CherryPy, Werkzeug etc...)

- look up 'smart reply markov model' or just 'smart reply markov model'
useful:
- http://www.wildml.com/2015/09/recurrent-neural-networks-tutorial-part-2-implementing-a-language-model-rnn-with-python-numpy-and-theano/
- http://www.cs.ubc.ca/~murphyk/Bayes/rabiner.pdf
- http://www.cs.columbia.edu/~mcollins/fb.pdf

ltsm
- http://karpathy.github.io/2015/05/21/rnn-effectiveness/
- http://colah.github.io/posts/2015-08-Understanding-LSTMs/

spelling
http://norvig.com/spell-correct.html
http://pythonhosted.org/pyenchant/api/enchant.html

elastic
- http://stackoverflow.com/questions/26547043/elasticsearch-full-text-autocomplete


=======================

2 hours
- test out results of initial model
- make hold out corpus
- make training/validation corpus
    * the responses should be one sided. How can we do this?
        try by just feeding it input text of only one side

3 hours
- write out class skeleton 
    - train method
    - predict method
        - the function would be called every keystroke
    - pickle method

30 mins
- take a quick peek at autocomplete's package to potentially deal with typos

* also email this guy and see if the use case makes sense

2 hours
- autosuggest server
    - write a flask app or wrap it into a restful api

2-days
-write up: 
    - How would you evaluate your autosuggest server? If you made another version, how would you compare the two to decide which is better?
        *ask sri if he's got any docs for A/B testing recommenders

    - One way to improve the autosuggest server is to give topic-specific suggestions. How would you design an auto-categorization server? 

        > layer another multi-label classifier that figure's out which category. feature matrix: tfidf, other features
        * lookup ways to model topics

    It should take a list of messages and return a TopicId. (Assume that every conversation in the training set has a TopicId).

    - How would you evaluate if your auto-categorization server is good?
        > are people being sent to the right categories?
        * look at the training set.

    - Processing hundreds of millions of conversations for your autosuggest and auto-categorize models could take a very long time. How could you distribute the processing across multiple machines?
        > deploying the api/app to various endpoints
        * ask sri this question

10 mins
- EDA: bag of words and word count frequencies.

===============
- figure out a way to interact with this via python
    - seed text and output text
    - create a set of suggestions that start with the input words
        - is there a way to grab the most frequent ones? i.e. how should I rank the output.


- normalize input data s.t.
    - all text is lower case
    - fix the typos
        - autocomplete? spell check?
            https://github.com/mattalcock/blog/blob/master/2012/12/5/python-spell-checker.rst
            http://norvig.com/spell-correct.html
        - Remove Punctuation?
    - removing infrequent terms?

    - make sure the lines are permuting properly
    - What are my stop words in this case?
        * on the next iteration we'll have to think of a good way to fix for this issue
    - change temperature to something close to 0 for our sample line

- I was in the headspace of markov chains and frequency distributions prior to RNNs

- https://catalog.ldc.upenn.edu/LDC2006T13 using google's corpora we could optimize for later iterations